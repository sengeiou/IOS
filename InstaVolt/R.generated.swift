//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `ForgetPassword`.
    static let forgetPassword = _R.storyboard.forgetPassword()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Payment`.
    static let payment = _R.storyboard.payment()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `StationListing`.
    static let stationListing = _R.storyboard.stationListing()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ForgetPassword", bundle: ...)`
    static func forgetPassword(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.forgetPassword)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Payment", bundle: ...)`
    static func payment(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.payment)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "StationListing", bundle: ...)`
    static func stationListing(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.stationListing)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `AppGreenColor`.
    static let appGreenColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppGreenColor")
    /// Color `AppRedColor`.
    static let appRedColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AppRedColor")
    /// Color `NavbarColor`.
    static let navbarColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NavbarColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppGreenColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appGreenColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appGreenColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AppRedColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func appRedColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.appRedColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NavbarColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navbarColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navbarColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 39 files.
  struct file {
    /// Resource file `FONTSFREE-NET-SFPRODISPLAY-LIGHT.TTF`.
    static let fontsfreenetsfprodisplaylightttF = Rswift.FileResource(bundle: R.hostingBundle, name: "FONTSFREE-NET-SFPRODISPLAY-LIGHT", pathExtension: "TTF")
    /// Resource file `FontsFree-Net-SFProDisplay-Bold.ttf`.
    static let fontsFreeNetSFProDisplayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FontsFree-Net-SFProDisplay-Bold", pathExtension: "ttf")
    /// Resource file `FontsFree-Net-SFProDisplay-Medium.ttf`.
    static let fontsFreeNetSFProDisplayMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FontsFree-Net-SFProDisplay-Medium", pathExtension: "ttf")
    /// Resource file `FontsFree-Net-SFProDisplay-Regular.ttf`.
    static let fontsFreeNetSFProDisplayRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "FontsFree-Net-SFProDisplay-Regular", pathExtension: "ttf")
    /// Resource file `Lato-Black.ttf`.
    static let latoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Black", pathExtension: "ttf")
    /// Resource file `Lato-BlackItalic.ttf`.
    static let latoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-BlackItalic", pathExtension: "ttf")
    /// Resource file `Lato-Bold.ttf`.
    static let latoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Bold", pathExtension: "ttf")
    /// Resource file `Lato-BoldItalic.ttf`.
    static let latoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-BoldItalic", pathExtension: "ttf")
    /// Resource file `Lato-Hairline.ttf`.
    static let latoHairlineTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Hairline", pathExtension: "ttf")
    /// Resource file `Lato-HairlineItalic.ttf`.
    static let latoHairlineItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-HairlineItalic", pathExtension: "ttf")
    /// Resource file `Lato-Heavy.ttf`.
    static let latoHeavyTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Heavy", pathExtension: "ttf")
    /// Resource file `Lato-HeavyItalic.ttf`.
    static let latoHeavyItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-HeavyItalic", pathExtension: "ttf")
    /// Resource file `Lato-Italic.ttf`.
    static let latoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Italic", pathExtension: "ttf")
    /// Resource file `Lato-Light.ttf`.
    static let latoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Light", pathExtension: "ttf")
    /// Resource file `Lato-LightItalic.ttf`.
    static let latoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-LightItalic", pathExtension: "ttf")
    /// Resource file `Lato-Medium.ttf`.
    static let latoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Medium", pathExtension: "ttf")
    /// Resource file `Lato-MediumItalic.ttf`.
    static let latoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-MediumItalic", pathExtension: "ttf")
    /// Resource file `Lato-Regular.ttf`.
    static let latoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Regular", pathExtension: "ttf")
    /// Resource file `Lato-Semibold.ttf`.
    static let latoSemiboldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Semibold", pathExtension: "ttf")
    /// Resource file `Lato-SemiboldItalic.ttf`.
    static let latoSemiboldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-SemiboldItalic", pathExtension: "ttf")
    /// Resource file `Lato-Thin.ttf`.
    static let latoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-Thin", pathExtension: "ttf")
    /// Resource file `Lato-ThinItalic.ttf`.
    static let latoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Lato-ThinItalic", pathExtension: "ttf")
    /// Resource file `SF-PRO-DISPLAY-BLACKITALIC.OTF`.
    static let sfprodisplayblackitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-BLACKITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-BOLDITALIC.OTF`.
    static let sfprodisplaybolditalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-BOLDITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-HEAVYITALIC (7).OTF`.
    static let sfprodisplayheavyitalic7OTF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-HEAVYITALIC (7)", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-HEAVYITALIC.OTF`.
    static let sfprodisplayheavyitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-HEAVYITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-LIGHTITALIC.OTF`.
    static let sfprodisplaylightitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-LIGHTITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-MEDIUMITALIC (8).OTF`.
    static let sfprodisplaymediumitalic8OTF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-MEDIUMITALIC (8)", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-MEDIUMITALIC.OTF`.
    static let sfprodisplaymediumitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-MEDIUMITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-REGULARITALIC (1).OTF`.
    static let sfprodisplayregularitalic1OTF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-REGULARITALIC (1)", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-REGULARITALIC.OTF`.
    static let sfprodisplayregularitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-REGULARITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-SEMIBOLDITALIC (2).OTF`.
    static let sfprodisplaysemibolditalic2OTF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-SEMIBOLDITALIC (2)", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-SEMIBOLDITALIC.OTF`.
    static let sfprodisplaysemibolditalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-SEMIBOLDITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-THINITALIC (3).OTF`.
    static let sfprodisplaythinitalic3OTF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-THINITALIC (3)", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-THINITALIC.OTF`.
    static let sfprodisplaythinitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-THINITALIC", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-ULTRALIGHTITALIC (4).OTF`.
    static let sfprodisplayultralightitalic4OTF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-ULTRALIGHTITALIC (4)", pathExtension: "OTF")
    /// Resource file `SF-PRO-DISPLAY-ULTRALIGHTITALIC.OTF`.
    static let sfprodisplayultralightitalicotF = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-PRO-DISPLAY-ULTRALIGHTITALIC", pathExtension: "OTF")
    /// Resource file `awsconfiguration.json`.
    static let awsconfigurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "awsconfiguration", pathExtension: "json")
    /// Resource file `client_511663691075-v3u8jfe94krmbagd2u1607c8kol2no8v.apps.googleusercontent.com.plist`.
    static let client_511663691075V3u8jfe94krmbagd2u1607c8kol2no8vAppsGoogleusercontentComPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "client_511663691075-v3u8jfe94krmbagd2u1607c8kol2no8v.apps.googleusercontent.com", pathExtension: "plist")

    /// `bundle.url(forResource: "FONTSFREE-NET-SFPRODISPLAY-LIGHT", withExtension: "TTF")`
    static func fontsfreenetsfprodisplaylightttF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontsfreenetsfprodisplaylightttF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FontsFree-Net-SFProDisplay-Bold", withExtension: "ttf")`
    static func fontsFreeNetSFProDisplayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontsFreeNetSFProDisplayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FontsFree-Net-SFProDisplay-Medium", withExtension: "ttf")`
    static func fontsFreeNetSFProDisplayMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontsFreeNetSFProDisplayMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "FontsFree-Net-SFProDisplay-Regular", withExtension: "ttf")`
    static func fontsFreeNetSFProDisplayRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fontsFreeNetSFProDisplayRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Black", withExtension: "ttf")`
    static func latoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-BlackItalic", withExtension: "ttf")`
    static func latoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Bold", withExtension: "ttf")`
    static func latoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-BoldItalic", withExtension: "ttf")`
    static func latoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Hairline", withExtension: "ttf")`
    static func latoHairlineTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoHairlineTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-HairlineItalic", withExtension: "ttf")`
    static func latoHairlineItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoHairlineItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Heavy", withExtension: "ttf")`
    static func latoHeavyTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoHeavyTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-HeavyItalic", withExtension: "ttf")`
    static func latoHeavyItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoHeavyItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Italic", withExtension: "ttf")`
    static func latoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Light", withExtension: "ttf")`
    static func latoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-LightItalic", withExtension: "ttf")`
    static func latoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Medium", withExtension: "ttf")`
    static func latoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-MediumItalic", withExtension: "ttf")`
    static func latoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Regular", withExtension: "ttf")`
    static func latoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Semibold", withExtension: "ttf")`
    static func latoSemiboldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoSemiboldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-SemiboldItalic", withExtension: "ttf")`
    static func latoSemiboldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoSemiboldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-Thin", withExtension: "ttf")`
    static func latoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Lato-ThinItalic", withExtension: "ttf")`
    static func latoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.latoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-BLACKITALIC", withExtension: "OTF")`
    static func sfprodisplayblackitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayblackitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-BOLDITALIC", withExtension: "OTF")`
    static func sfprodisplaybolditalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaybolditalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-HEAVYITALIC (7)", withExtension: "OTF")`
    static func sfprodisplayheavyitalic7OTF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayheavyitalic7OTF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-HEAVYITALIC", withExtension: "OTF")`
    static func sfprodisplayheavyitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayheavyitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-LIGHTITALIC", withExtension: "OTF")`
    static func sfprodisplaylightitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaylightitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-MEDIUMITALIC (8)", withExtension: "OTF")`
    static func sfprodisplaymediumitalic8OTF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaymediumitalic8OTF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-MEDIUMITALIC", withExtension: "OTF")`
    static func sfprodisplaymediumitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaymediumitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-REGULARITALIC (1)", withExtension: "OTF")`
    static func sfprodisplayregularitalic1OTF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayregularitalic1OTF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-REGULARITALIC", withExtension: "OTF")`
    static func sfprodisplayregularitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayregularitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-SEMIBOLDITALIC (2)", withExtension: "OTF")`
    static func sfprodisplaysemibolditalic2OTF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaysemibolditalic2OTF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-SEMIBOLDITALIC", withExtension: "OTF")`
    static func sfprodisplaysemibolditalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaysemibolditalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-THINITALIC (3)", withExtension: "OTF")`
    static func sfprodisplaythinitalic3OTF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaythinitalic3OTF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-THINITALIC", withExtension: "OTF")`
    static func sfprodisplaythinitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplaythinitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-ULTRALIGHTITALIC (4)", withExtension: "OTF")`
    static func sfprodisplayultralightitalic4OTF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayultralightitalic4OTF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-PRO-DISPLAY-ULTRALIGHTITALIC", withExtension: "OTF")`
    static func sfprodisplayultralightitalicotF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfprodisplayultralightitalicotF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "awsconfiguration", withExtension: "json")`
    static func awsconfigurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.awsconfigurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "client_511663691075-v3u8jfe94krmbagd2u1607c8kol2no8v.apps.googleusercontent.com", withExtension: "plist")`
    static func client_511663691075V3u8jfe94krmbagd2u1607c8kol2no8vAppsGoogleusercontentComPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.client_511663691075V3u8jfe94krmbagd2u1607c8kol2no8vAppsGoogleusercontentComPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 37 fonts.
  struct font: Rswift.Validatable {
    /// Font `Lato-BlackItalic`.
    static let latoBlackItalic = Rswift.FontResource(fontName: "Lato-BlackItalic")
    /// Font `Lato-Black`.
    static let latoBlack = Rswift.FontResource(fontName: "Lato-Black")
    /// Font `Lato-BoldItalic`.
    static let latoBoldItalic = Rswift.FontResource(fontName: "Lato-BoldItalic")
    /// Font `Lato-Bold`.
    static let latoBold = Rswift.FontResource(fontName: "Lato-Bold")
    /// Font `Lato-HairlineItalic`.
    static let latoHairlineItalic = Rswift.FontResource(fontName: "Lato-HairlineItalic")
    /// Font `Lato-Hairline`.
    static let latoHairline = Rswift.FontResource(fontName: "Lato-Hairline")
    /// Font `Lato-HeavyItalic`.
    static let latoHeavyItalic = Rswift.FontResource(fontName: "Lato-HeavyItalic")
    /// Font `Lato-Heavy`.
    static let latoHeavy = Rswift.FontResource(fontName: "Lato-Heavy")
    /// Font `Lato-Italic`.
    static let latoItalic = Rswift.FontResource(fontName: "Lato-Italic")
    /// Font `Lato-LightItalic`.
    static let latoLightItalic = Rswift.FontResource(fontName: "Lato-LightItalic")
    /// Font `Lato-Light`.
    static let latoLight = Rswift.FontResource(fontName: "Lato-Light")
    /// Font `Lato-MediumItalic`.
    static let latoMediumItalic = Rswift.FontResource(fontName: "Lato-MediumItalic")
    /// Font `Lato-Medium`.
    static let latoMedium = Rswift.FontResource(fontName: "Lato-Medium")
    /// Font `Lato-Regular`.
    static let latoRegular = Rswift.FontResource(fontName: "Lato-Regular")
    /// Font `Lato-SemiboldItalic`.
    static let latoSemiboldItalic = Rswift.FontResource(fontName: "Lato-SemiboldItalic")
    /// Font `Lato-Semibold`.
    static let latoSemibold = Rswift.FontResource(fontName: "Lato-Semibold")
    /// Font `Lato-ThinItalic`.
    static let latoThinItalic = Rswift.FontResource(fontName: "Lato-ThinItalic")
    /// Font `Lato-Thin`.
    static let latoThin = Rswift.FontResource(fontName: "Lato-Thin")
    /// Font `SFProDisplay-BlackItalic`.
    static let sfProDisplayBlackItalic = Rswift.FontResource(fontName: "SFProDisplay-BlackItalic")
    /// Font `SFProDisplay-BoldItalic`.
    static let sfProDisplayBoldItalic = Rswift.FontResource(fontName: "SFProDisplay-BoldItalic")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-LightItalic`.
    static let sfProDisplayLightItalic = Rswift.FontResource(fontName: "SFProDisplay-LightItalic")
    /// Font `SFProDisplay-Light`.
    static let sfProDisplayLight = Rswift.FontResource(fontName: "SFProDisplay-Light")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")

    /// `UIFont(name: "Lato-Black", size: ...)`
    static func latoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBlack, size: size)
    }

    /// `UIFont(name: "Lato-BlackItalic", size: ...)`
    static func latoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBlackItalic, size: size)
    }

    /// `UIFont(name: "Lato-Bold", size: ...)`
    static func latoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBold, size: size)
    }

    /// `UIFont(name: "Lato-BoldItalic", size: ...)`
    static func latoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoBoldItalic, size: size)
    }

    /// `UIFont(name: "Lato-Hairline", size: ...)`
    static func latoHairline(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoHairline, size: size)
    }

    /// `UIFont(name: "Lato-HairlineItalic", size: ...)`
    static func latoHairlineItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoHairlineItalic, size: size)
    }

    /// `UIFont(name: "Lato-Heavy", size: ...)`
    static func latoHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoHeavy, size: size)
    }

    /// `UIFont(name: "Lato-HeavyItalic", size: ...)`
    static func latoHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoHeavyItalic, size: size)
    }

    /// `UIFont(name: "Lato-Italic", size: ...)`
    static func latoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoItalic, size: size)
    }

    /// `UIFont(name: "Lato-Light", size: ...)`
    static func latoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoLight, size: size)
    }

    /// `UIFont(name: "Lato-LightItalic", size: ...)`
    static func latoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoLightItalic, size: size)
    }

    /// `UIFont(name: "Lato-Medium", size: ...)`
    static func latoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoMedium, size: size)
    }

    /// `UIFont(name: "Lato-MediumItalic", size: ...)`
    static func latoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoMediumItalic, size: size)
    }

    /// `UIFont(name: "Lato-Regular", size: ...)`
    static func latoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoRegular, size: size)
    }

    /// `UIFont(name: "Lato-Semibold", size: ...)`
    static func latoSemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoSemibold, size: size)
    }

    /// `UIFont(name: "Lato-SemiboldItalic", size: ...)`
    static func latoSemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoSemiboldItalic, size: size)
    }

    /// `UIFont(name: "Lato-Thin", size: ...)`
    static func latoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoThin, size: size)
    }

    /// `UIFont(name: "Lato-ThinItalic", size: ...)`
    static func latoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: latoThinItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-BlackItalic", size: ...)`
    static func sfProDisplayBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlackItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-BoldItalic", size: ...)`
    static func sfProDisplayBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBoldItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Light", size: ...)`
    static func sfProDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLight, size: size)
    }

    /// `UIFont(name: "SFProDisplay-LightItalic", size: ...)`
    static func sfProDisplayLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLightItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    static func validate() throws {
      if R.font.latoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Black' could not be loaded, is 'Lato-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-BlackItalic' could not be loaded, is 'Lato-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Bold' could not be loaded, is 'Lato-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-BoldItalic' could not be loaded, is 'Lato-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoHairline(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Hairline' could not be loaded, is 'Lato-Hairline.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoHairlineItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-HairlineItalic' could not be loaded, is 'Lato-HairlineItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Heavy' could not be loaded, is 'Lato-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-HeavyItalic' could not be loaded, is 'Lato-HeavyItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Italic' could not be loaded, is 'Lato-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Light' could not be loaded, is 'Lato-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-LightItalic' could not be loaded, is 'Lato-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Medium' could not be loaded, is 'Lato-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-MediumItalic' could not be loaded, is 'Lato-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Regular' could not be loaded, is 'Lato-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoSemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Semibold' could not be loaded, is 'Lato-Semibold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoSemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-SemiboldItalic' could not be loaded, is 'Lato-SemiboldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-Thin' could not be loaded, is 'Lato-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.latoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Lato-ThinItalic' could not be loaded, is 'Lato-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BlackItalic' could not be loaded, is 'SF-PRO-DISPLAY-BLACKITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'FontsFree-Net-SFProDisplay-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BoldItalic' could not be loaded, is 'SF-PRO-DISPLAY-BOLDITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Light' could not be loaded, is 'FONTSFREE-NET-SFPRODISPLAY-LIGHT.TTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-LightItalic' could not be loaded, is 'SF-PRO-DISPLAY-LIGHTITALIC.OTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'FontsFree-Net-SFProDisplay-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'FontsFree-Net-SFProDisplay-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 67 images.
  struct image {
    /// Image `FilterTick`.
    static let filterTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "FilterTick")
    /// Image `InvalidReferralCode`.
    static let invalidReferralCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "InvalidReferralCode")
    /// Image `SelecedFilterTick`.
    static let selecedFilterTick = Rswift.ImageResource(bundle: R.hostingBundle, name: "SelecedFilterTick")
    /// Image `SelectedMyProfile`.
    static let selectedMyProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "SelectedMyProfile")
    /// Image `Selectedlocation`.
    static let selectedlocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Selectedlocation")
    /// Image `Splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "Splash")
    /// Image `StationDetailSS`.
    static let stationDetailSS = Rswift.ImageResource(bundle: R.hostingBundle, name: "StationDetailSS")
    /// Image `amenities`.
    static let amenities = Rswift.ImageResource(bundle: R.hostingBundle, name: "amenities")
    /// Image `back_arrow`.
    static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
    /// Image `blackCharger`.
    static let blackCharger = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackCharger")
    /// Image `blackIconBig`.
    static let blackIconBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackIconBig")
    /// Image `blackIcon`.
    static let blackIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackIcon")
    /// Image `blackPinWithoutShadow`.
    static let blackPinWithoutShadow = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackPinWithoutShadow")
    /// Image `blackback_arrow`.
    static let blackback_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "blackback_arrow")
    /// Image `blueCharger`.
    static let blueCharger = Rswift.ImageResource(bundle: R.hostingBundle, name: "blueCharger")
    /// Image `bottom_background`.
    static let bottom_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_background")
    /// Image `cancel`.
    static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "cancel")
    /// Image `carLogo`.
    static let carLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "carLogo")
    /// Image `charge`.
    static let charge = Rswift.ImageResource(bundle: R.hostingBundle, name: "charge")
    /// Image `checkboxSelected`.
    static let checkboxSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkboxSelected")
    /// Image `checkbox`.
    static let checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `contact`.
    static let contact = Rswift.ImageResource(bundle: R.hostingBundle, name: "contact")
    /// Image `contactus_address`.
    static let contactus_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactus_address")
    /// Image `contactus_email`.
    static let contactus_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactus_email")
    /// Image `contactus_phone`.
    static let contactus_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "contactus_phone")
    /// Image `cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross")
    /// Image `currentLocation`.
    static let currentLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "currentLocation")
    /// Image `direction`.
    static let direction = Rswift.ImageResource(bundle: R.hostingBundle, name: "direction")
    /// Image `email_verified`.
    static let email_verified = Rswift.ImageResource(bundle: R.hostingBundle, name: "email_verified")
    /// Image `eyeSelected`.
    static let eyeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "eyeSelected")
    /// Image `eye`.
    static let eye = Rswift.ImageResource(bundle: R.hostingBundle, name: "eye")
    /// Image `facebook_icon`.
    static let facebook_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "facebook_icon")
    /// Image `faq`.
    static let faq = Rswift.ImageResource(bundle: R.hostingBundle, name: "faq")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `google_icon`.
    static let google_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "google_icon")
    /// Image `greenCharger`.
    static let greenCharger = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenCharger")
    /// Image `list`.
    static let list = Rswift.ImageResource(bundle: R.hostingBundle, name: "list")
    /// Image `location`.
    static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "location")
    /// Image `login_background`.
    static let login_background = Rswift.ImageResource(bundle: R.hostingBundle, name: "login_background")
    /// Image `logo-with-text`.
    static let logoWithText = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo-with-text")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `mapicon`.
    static let mapicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "mapicon")
    /// Image `menu_icon`.
    static let menu_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_icon")
    /// Image `my-profile`.
    static let myProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "my-profile")
    /// Image `payment`.
    static let payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "payment")
    /// Image `paymentss`.
    static let paymentss = Rswift.ImageResource(bundle: R.hostingBundle, name: "paymentss")
    /// Image `plug_icon`.
    static let plug_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "plug_icon")
    /// Image `redIconBig`.
    static let redIconBig = Rswift.ImageResource(bundle: R.hostingBundle, name: "redIconBig")
    /// Image `redIcon`.
    static let redIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "redIcon")
    /// Image `referral_error`.
    static let referral_error = Rswift.ImageResource(bundle: R.hostingBundle, name: "referral_error")
    /// Image `right_arrow-gray`.
    static let right_arrowGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "right_arrow-gray")
    /// Image `right_arrow`.
    static let right_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right_arrow")
    /// Image `satelliteMap`.
    static let satelliteMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "satelliteMap")
    /// Image `searchGrey`.
    static let searchGrey = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchGrey")
    /// Image `search_black`.
    static let search_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_black")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `searchedLocation`.
    static let searchedLocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchedLocation")
    /// Image `selectedFaq`.
    static let selectedFaq = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedFaq")
    /// Image `selectedPayment`.
    static let selectedPayment = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedPayment")
    /// Image `selected_contact-us`.
    static let selected_contactUs = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_contact-us")
    /// Image `selected_filter`.
    static let selected_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "selected_filter")
    /// Image `signInButtonBg`.
    static let signInButtonBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "signInButtonBg")
    /// Image `signUpButtonBg`.
    static let signUpButtonBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "signUpButtonBg")
    /// Image `standardMap`.
    static let standardMap = Rswift.ImageResource(bundle: R.hostingBundle, name: "standardMap")
    /// Image `whiteButtonBg`.
    static let whiteButtonBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "whiteButtonBg")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FilterTick", bundle: ..., traitCollection: ...)`
    static func filterTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filterTick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "InvalidReferralCode", bundle: ..., traitCollection: ...)`
    static func invalidReferralCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.invalidReferralCode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SelecedFilterTick", bundle: ..., traitCollection: ...)`
    static func selecedFilterTick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selecedFilterTick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SelectedMyProfile", bundle: ..., traitCollection: ...)`
    static func selectedMyProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedMyProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Selectedlocation", bundle: ..., traitCollection: ...)`
    static func selectedlocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedlocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "StationDetailSS", bundle: ..., traitCollection: ...)`
    static func stationDetailSS(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stationDetailSS, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amenities", bundle: ..., traitCollection: ...)`
    static func amenities(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amenities, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
    static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackCharger", bundle: ..., traitCollection: ...)`
    static func blackCharger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackCharger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackIcon", bundle: ..., traitCollection: ...)`
    static func blackIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackIconBig", bundle: ..., traitCollection: ...)`
    static func blackIconBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackIconBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackPinWithoutShadow", bundle: ..., traitCollection: ...)`
    static func blackPinWithoutShadow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackPinWithoutShadow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blackback_arrow", bundle: ..., traitCollection: ...)`
    static func blackback_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blackback_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blueCharger", bundle: ..., traitCollection: ...)`
    static func blueCharger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueCharger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bottom_background", bundle: ..., traitCollection: ...)`
    static func bottom_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cancel", bundle: ..., traitCollection: ...)`
    static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cancel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "carLogo", bundle: ..., traitCollection: ...)`
    static func carLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.carLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "charge", bundle: ..., traitCollection: ...)`
    static func charge(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.charge, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox", bundle: ..., traitCollection: ...)`
    static func checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkboxSelected", bundle: ..., traitCollection: ...)`
    static func checkboxSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkboxSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contact", bundle: ..., traitCollection: ...)`
    static func contact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactus_address", bundle: ..., traitCollection: ...)`
    static func contactus_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactus_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactus_email", bundle: ..., traitCollection: ...)`
    static func contactus_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactus_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "contactus_phone", bundle: ..., traitCollection: ...)`
    static func contactus_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.contactus_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "currentLocation", bundle: ..., traitCollection: ...)`
    static func currentLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.currentLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "direction", bundle: ..., traitCollection: ...)`
    static func direction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.direction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "email_verified", bundle: ..., traitCollection: ...)`
    static func email_verified(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email_verified, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eye", bundle: ..., traitCollection: ...)`
    static func eye(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eye, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "eyeSelected", bundle: ..., traitCollection: ...)`
    static func eyeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eyeSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "facebook_icon", bundle: ..., traitCollection: ...)`
    static func facebook_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.facebook_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "faq", bundle: ..., traitCollection: ...)`
    static func faq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.faq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "google_icon", bundle: ..., traitCollection: ...)`
    static func google_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.google_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenCharger", bundle: ..., traitCollection: ...)`
    static func greenCharger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCharger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "list", bundle: ..., traitCollection: ...)`
    static func list(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.list, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
    static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "login_background", bundle: ..., traitCollection: ...)`
    static func login_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo-with-text", bundle: ..., traitCollection: ...)`
    static func logoWithText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoWithText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mapicon", bundle: ..., traitCollection: ...)`
    static func mapicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mapicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_icon", bundle: ..., traitCollection: ...)`
    static func menu_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "my-profile", bundle: ..., traitCollection: ...)`
    static func myProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myProfile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "payment", bundle: ..., traitCollection: ...)`
    static func payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.payment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "paymentss", bundle: ..., traitCollection: ...)`
    static func paymentss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plug_icon", bundle: ..., traitCollection: ...)`
    static func plug_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plug_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redIcon", bundle: ..., traitCollection: ...)`
    static func redIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redIconBig", bundle: ..., traitCollection: ...)`
    static func redIconBig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redIconBig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "referral_error", bundle: ..., traitCollection: ...)`
    static func referral_error(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.referral_error, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right_arrow", bundle: ..., traitCollection: ...)`
    static func right_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "right_arrow-gray", bundle: ..., traitCollection: ...)`
    static func right_arrowGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.right_arrowGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "satelliteMap", bundle: ..., traitCollection: ...)`
    static func satelliteMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.satelliteMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchGrey", bundle: ..., traitCollection: ...)`
    static func searchGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_black", bundle: ..., traitCollection: ...)`
    static func search_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchedLocation", bundle: ..., traitCollection: ...)`
    static func searchedLocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchedLocation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedFaq", bundle: ..., traitCollection: ...)`
    static func selectedFaq(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedFaq, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedPayment", bundle: ..., traitCollection: ...)`
    static func selectedPayment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedPayment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected_contact-us", bundle: ..., traitCollection: ...)`
    static func selected_contactUs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_contactUs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selected_filter", bundle: ..., traitCollection: ...)`
    static func selected_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selected_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signInButtonBg", bundle: ..., traitCollection: ...)`
    static func signInButtonBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signInButtonBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "signUpButtonBg", bundle: ..., traitCollection: ...)`
    static func signUpButtonBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signUpButtonBg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "standardMap", bundle: ..., traitCollection: ...)`
    static func standardMap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.standardMap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whiteButtonBg", bundle: ..., traitCollection: ...)`
    static func whiteButtonBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteButtonBg, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 9 nibs.
  struct nib {
    /// Nib `AddressSuggestionTableViewCell`.
    static let addressSuggestionTableViewCell = _R.nib._AddressSuggestionTableViewCell()
    /// Nib `AmenitiesImageCollectionViewCell`.
    static let amenitiesImageCollectionViewCell = _R.nib._AmenitiesImageCollectionViewCell()
    /// Nib `AppNavigationBar`.
    static let appNavigationBar = _R.nib._AppNavigationBar()
    /// Nib `CategoryTableViewCell`.
    static let categoryTableViewCell = _R.nib._CategoryTableViewCell()
    /// Nib `FacilitiesCollectionCell`.
    static let facilitiesCollectionCell = _R.nib._FacilitiesCollectionCell()
    /// Nib `MSTextField`.
    static let msTextField = _R.nib._MSTextField()
    /// Nib `MapDrawer`.
    static let mapDrawer = _R.nib._MapDrawer()
    /// Nib `StationListingTableViewCell`.
    static let stationListingTableViewCell = _R.nib._StationListingTableViewCell()
    /// Nib `SubCategoryTableViewCell`.
    static let subCategoryTableViewCell = _R.nib._SubCategoryTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AddressSuggestionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.addressSuggestionTableViewCell) instead")
    static func addressSuggestionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addressSuggestionTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AmenitiesImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.amenitiesImageCollectionViewCell) instead")
    static func amenitiesImageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.amenitiesImageCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppNavigationBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appNavigationBar) instead")
    static func appNavigationBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appNavigationBar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryTableViewCell) instead")
    static func categoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FacilitiesCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.facilitiesCollectionCell) instead")
    static func facilitiesCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.facilitiesCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MSTextField", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.msTextField) instead")
    static func msTextField(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.msTextField)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MapDrawer", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mapDrawer) instead")
    static func mapDrawer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mapDrawer)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StationListingTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stationListingTableViewCell) instead")
    static func stationListingTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stationListingTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SubCategoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.subCategoryTableViewCell) instead")
    static func subCategoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.subCategoryTableViewCell)
    }
    #endif

    static func addressSuggestionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressSuggestionTableViewCell? {
      return R.nib.addressSuggestionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressSuggestionTableViewCell
    }

    static func amenitiesImageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmenitiesImageCollectionViewCell? {
      return R.nib.amenitiesImageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmenitiesImageCollectionViewCell
    }

    static func appNavigationBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppNavigationBar? {
      return R.nib.appNavigationBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppNavigationBar
    }

    static func categoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryTableViewCell? {
      return R.nib.categoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryTableViewCell
    }

    static func facilitiesCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FacilitiesCollectionCell? {
      return R.nib.facilitiesCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FacilitiesCollectionCell
    }

    static func mapDrawer(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapDrawer? {
      return R.nib.mapDrawer.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapDrawer
    }

    static func msTextField(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.msTextField.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func stationListingTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StationListingTableViewCell? {
      return R.nib.stationListingTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StationListingTableViewCell
    }

    static func subCategoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryTableViewCell? {
      return R.nib.subCategoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AddressListTableCell`.
    static let addressListTableCell: Rswift.ReuseIdentifier<AddressListTableCell> = Rswift.ReuseIdentifier(identifier: "AddressListTableCell")
    /// Reuse identifier `FacilitiesCollectionCell`.
    static let facilitiesCollectionCell: Rswift.ReuseIdentifier<FacilitiesCollectionCell> = Rswift.ReuseIdentifier(identifier: "FacilitiesCollectionCell")
    /// Reuse identifier `MenuItemTableViewCell`.
    static let menuItemTableViewCell: Rswift.ReuseIdentifier<MenuItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "MenuItemTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _AddressSuggestionTableViewCell.validate()
      try _AmenitiesImageCollectionViewCell.validate()
      try _MapDrawer.validate()
    }

    struct _AddressSuggestionTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddressSuggestionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AddressSuggestionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddressSuggestionTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "right_arrow-gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right_arrow-gray' is used in nib 'AddressSuggestionTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AmenitiesImageCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AmenitiesImageCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmenitiesImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmenitiesImageCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "amenities", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'amenities' is used in nib 'AmenitiesImageCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _AppNavigationBar: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AppNavigationBar"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppNavigationBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppNavigationBar
      }

      fileprivate init() {}
    }

    struct _CategoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CategoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _FacilitiesCollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FacilitiesCollectionCell

      let bundle = R.hostingBundle
      let identifier = "FacilitiesCollectionCell"
      let name = "FacilitiesCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FacilitiesCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FacilitiesCollectionCell
      }

      fileprivate init() {}
    }

    struct _MSTextField: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MSTextField"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MapDrawer: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MapDrawer"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MapDrawer? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MapDrawer
      }

      static func validate() throws {
        if UIKit.UIImage(named: "blackCharger", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blackCharger' is used in nib 'MapDrawer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blackPinWithoutShadow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blackPinWithoutShadow' is used in nib 'MapDrawer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "blueCharger", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'blueCharger' is used in nib 'MapDrawer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "charge", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'charge' is used in nib 'MapDrawer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "direction", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'direction' is used in nib 'MapDrawer', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greenCharger", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greenCharger' is used in nib 'MapDrawer', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppRedColor' is used in storyboard 'MapDrawer', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _StationListingTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StationListingTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StationListingTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StationListingTableViewCell
      }

      fileprivate init() {}
    }

    struct _SubCategoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SubCategoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SubCategoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SubCategoryTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try forgetPassword.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try payment.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try setting.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try stationListing.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct forgetPassword: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let name = "ForgetPassword"
      let resetPasswordNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ResetPasswordNavigationController")
      let resetPasswordViewController = StoryboardViewControllerResource<ResetPasswordViewController>(identifier: "ResetPasswordViewController")

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      func resetPasswordNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordNavigationController)
      }

      func resetPasswordViewController(_: Void = ()) -> ResetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_arrow' is used in storyboard 'ForgetPassword', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottom_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_background' is used in storyboard 'ForgetPassword', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_background' is used in storyboard 'ForgetPassword', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'ForgetPassword', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plug_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plug_icon' is used in storyboard 'ForgetPassword', but couldn't be loaded.") }
        if UIKit.UIImage(named: "signUpButtonBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signUpButtonBg' is used in storyboard 'ForgetPassword', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.forgetPassword().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'ForgetPassword' as 'ForgotPasswordViewController'.") }
        if _R.storyboard.forgetPassword().resetPasswordNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordNavigationController' could not be loaded from storyboard 'ForgetPassword' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.forgetPassword().resetPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordViewController' could not be loaded from storyboard 'ForgetPassword' as 'ResetPasswordViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let landingViewController = StoryboardViewControllerResource<LandingViewController>(identifier: "LandingViewController")
      let loginNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "loginNavigationController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      let registerOTPViewController = StoryboardViewControllerResource<RegisterOTPViewController>(identifier: "RegisterOTPViewController")
      let registerViewController = StoryboardViewControllerResource<RegisterViewController>(identifier: "RegisterViewController")
      let termsAndConditionViewController = StoryboardViewControllerResource<TermsAndConditionViewController>(identifier: "TermsAndConditionViewController")

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      func landingViewController(_: Void = ()) -> LandingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingViewController)
      }

      func loginNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginNavigationController)
      }

      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }

      func registerOTPViewController(_: Void = ()) -> RegisterOTPViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerOTPViewController)
      }

      func registerViewController(_: Void = ()) -> RegisterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registerViewController)
      }

      func termsAndConditionViewController(_: Void = ()) -> TermsAndConditionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsAndConditionViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "InvalidReferralCode", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'InvalidReferralCode' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_arrow' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bottom_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bottom_background' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "carLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'carLogo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkboxSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkboxSelected' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email_verified", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email_verified' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "facebook_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'facebook_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "google_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'google_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "login_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'login_background' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plug_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plug_icon' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "signUpButtonBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signUpButtonBg' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "whiteButtonBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'whiteButtonBg' is used in storyboard 'Login', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.login().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'Login' as 'ForgotPasswordViewController'.") }
        if _R.storyboard.login().landingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingViewController' could not be loaded from storyboard 'Login' as 'LandingViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
        if _R.storyboard.login().registerOTPViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerOTPViewController' could not be loaded from storyboard 'Login' as 'RegisterOTPViewController'.") }
        if _R.storyboard.login().registerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registerViewController' could not be loaded from storyboard 'Login' as 'RegisterViewController'.") }
        if _R.storyboard.login().termsAndConditionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsAndConditionViewController' could not be loaded from storyboard 'Login' as 'TermsAndConditionViewController'.") }
        if _R.storyboard.login().loginNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginNavigationController' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let mainNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "mainNavigationController")
      let mapViewController = StoryboardViewControllerResource<MapViewController>(identifier: "MapViewController")
      let name = "Main"

      func mainNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainNavigationController)
      }

      func mapViewController(_: Void = ()) -> MapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cancel' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "currentLocation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'currentLocation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "list", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'list' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_icon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'searchGrey' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selected_filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_filter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "standardMap", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'standardMap' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "NavbarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NavbarColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().mapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapViewController' could not be loaded from storyboard 'Main' as 'MapViewController'.") }
        if _R.storyboard.main().mainNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainNavigationController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct payment: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Payment"
      let paymentNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "paymentNavigationController")
      let paymentViewController = StoryboardViewControllerResource<PaymentViewController>(identifier: "PaymentViewController")

      func paymentNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentNavigationController)
      }

      func paymentViewController(_: Void = ()) -> PaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "menu_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_icon' is used in storyboard 'Payment', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paymentss", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paymentss' is used in storyboard 'Payment', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.payment().paymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentViewController' could not be loaded from storyboard 'Payment' as 'PaymentViewController'.") }
        if _R.storyboard.payment().paymentNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentNavigationController' could not be loaded from storyboard 'Payment' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addressSuggestionViewController = StoryboardViewControllerResource<AddressSuggestionViewController>(identifier: "AddressSuggestionViewController")
      let bundle = R.hostingBundle
      let changePasswordViewController = StoryboardViewControllerResource<ChangePasswordViewController>(identifier: "ChangePasswordViewController")
      let name = "Profile"
      let profileNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "profileNavigationController")
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      let sideMenuBarViewController = StoryboardViewControllerResource<SideMenuBarViewController>(identifier: "SideMenuBarViewController")

      func addressSuggestionViewController(_: Void = ()) -> AddressSuggestionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addressSuggestionViewController)
      }

      func changePasswordViewController(_: Void = ()) -> ChangePasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordViewController)
      }

      func profileNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileNavigationController)
      }

      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }

      func sideMenuBarViewController(_: Void = ()) -> SideMenuBarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuBarViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_arrow' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkbox", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkbox' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "checkboxSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'checkboxSelected' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo-with-text", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo-with-text' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_icon' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "my-profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'my-profile' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right_arrow' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "signUpButtonBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signUpButtonBg' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "whiteButtonBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'whiteButtonBg' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AppRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AppRedColor' is used in storyboard 'Profile', but couldn't be loaded.") }
          if UIKit.UIColor(named: "NavbarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NavbarColor' is used in storyboard 'Profile', but couldn't be loaded.") }
        }
        if _R.storyboard.profile().addressSuggestionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addressSuggestionViewController' could not be loaded from storyboard 'Profile' as 'AddressSuggestionViewController'.") }
        if _R.storyboard.profile().changePasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordViewController' could not be loaded from storyboard 'Profile' as 'ChangePasswordViewController'.") }
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
        if _R.storyboard.profile().sideMenuBarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuBarViewController' could not be loaded from storyboard 'Profile' as 'SideMenuBarViewController'.") }
        if _R.storyboard.profile().profileNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileNavigationController' could not be loaded from storyboard 'Profile' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct setting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let contactUsViewController = StoryboardViewControllerResource<ContactUsViewController>(identifier: "ContactUsViewController")
      let faqNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "FAQNavigationController")
      let faqViewController = StoryboardViewControllerResource<FAQViewController>(identifier: "FAQViewController")
      let filterViewController = StoryboardViewControllerResource<FilterViewController>(identifier: "FilterViewController")
      let name = "Setting"
      let settingNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "settingNavigationController")

      func contactUsViewController(_: Void = ()) -> ContactUsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactUsViewController)
      }

      func faqNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faqNavigationController)
      }

      func faqViewController(_: Void = ()) -> FAQViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faqViewController)
      }

      func filterViewController(_: Void = ()) -> FilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: filterViewController)
      }

      func settingNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingNavigationController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "contactus_address", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactus_address' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contactus_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactus_email' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "contactus_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'contactus_phone' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cross", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cross' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_icon' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "signUpButtonBg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'signUpButtonBg' is used in storyboard 'Setting', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.setting().contactUsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactUsViewController' could not be loaded from storyboard 'Setting' as 'ContactUsViewController'.") }
        if _R.storyboard.setting().faqNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faqNavigationController' could not be loaded from storyboard 'Setting' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.setting().faqViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faqViewController' could not be loaded from storyboard 'Setting' as 'FAQViewController'.") }
        if _R.storyboard.setting().filterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'filterViewController' could not be loaded from storyboard 'Setting' as 'FilterViewController'.") }
        if _R.storyboard.setting().settingNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingNavigationController' could not be loaded from storyboard 'Setting' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct stationListing: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mapListViewViewController = StoryboardViewControllerResource<MapListViewController>(identifier: "MapListViewViewController")
      let name = "StationListing"
      let stationDetailViewController = StoryboardViewControllerResource<StationDetailViewController>(identifier: "StationDetailViewController")

      func mapListViewViewController(_: Void = ()) -> MapListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mapListViewViewController)
      }

      func stationDetailViewController(_: Void = ()) -> StationDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stationDetailViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "StationDetailSS", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'StationDetailSS' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "back_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'back_arrow' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mapicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mapicon' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "menu_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'menu_icon' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "searchGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'searchGrey' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if UIKit.UIImage(named: "selected_filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'selected_filter' is used in storyboard 'StationListing', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "NavbarColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'NavbarColor' is used in storyboard 'StationListing', but couldn't be loaded.") }
        }
        if _R.storyboard.stationListing().mapListViewViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mapListViewViewController' could not be loaded from storyboard 'StationListing' as 'MapListViewController'.") }
        if _R.storyboard.stationListing().stationDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stationDetailViewController' could not be loaded from storyboard 'StationListing' as 'StationDetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
